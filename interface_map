    将键映射到值的对象。不能包含重复的键;每个键最多只能映射一个值。
    
    这个接口代替了Dictionary类，它是一个完全抽象的类而不是一个接口。
    
    Map接口提供了三个集合视图，这些视图允许将地图的内容视为一组键，值的集合或键值映射集。映射的顺序被定义为迭代器的顺序地图的收集意见返回它们的元素。
一些地图实现，比如TreeMap类，使得具体保证它们的顺序;其他的，比如HashMap类，不要。

    注意：如果将可变对象用作映射键，则必须非常小心。如果对象的值以影响等于比较的方式进行更改，而对象是映射中的键，则不会指定映射的行为。
这种禁止的特殊情况是地图不允许将自身作为关键字。虽然允许地图将自身包含为值，但是要特别小心：equals和hashCode方法不再被很好地定义在这样的地图上。

    所有通用映射实现类都应该提供两个“标准”构造函数：一个void（无参数）构造函数，用于创建一个空映射，另一个构造函数具有一个类型为Map的参数，
用于创建具有相同键值的新映射映射作为参数。实际上，后者的构造函数允许用户复制任何地图，生成所需类的等价地图。
没有办法执行这个建议（因为接口不能包含构造函数），但是JDK中的所有通用映射实现都符合。

    包含在这个接口中的“破坏性”方法，即修改它们在其上操作的映射的方法被指定为抛出UnsupportedOperationException，如果这个映射不支持该操作的话。
如果是这种情况，这些方法可能是如果调用对地图没有影响，则不需要抛出UnsupportedOperationException。
例如，在不可修改的地图上调用{@link＃putAll（Map）}方法，但不要求，如果映射的“叠加”映射为空，则抛出异常。

    一些映射实现对它们可能包含的键和值有一些限制。例如，一些实现禁止使用空键和值，一些映射对键的类型有一些限制。
尝试插入不合格的键或值会引发一个未经检查的异常试图查询不合格的键或值的存在可能会抛出一个异常，或者它可能只是返回false;
一些实现将显示前者的行为，一些将显示后者。
更一般地，试图对不符合条件的操作键或值的完成不会导致不合格的元素插入到映射中可能会抛出一个异常，或者它可能会成功，在实现的选项。
这种例外被标记为在这个接口的规范中“可选”。
