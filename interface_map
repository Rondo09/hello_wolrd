    将键映射到值的对象。不能包含重复的键;每个键最多只能映射一个值。
    
    这个接口代替了Dictionary类，它是一个完全抽象的类而不是一个接口。
    
    Map接口提供了三个集合视图，这些视图允许将地图的内容视为一组键，值的集合或键值映射集。映射的顺序被定义为迭代器的顺序地图的收集意见返回它们的元素。
一些地图实现，比如TreeMap类，使得具体保证它们的顺序;其他的，比如HashMap类，不要。

    注意：如果将可变对象用作映射键，则必须非常小心。如果对象的值以影响等于比较的方式进行更改，而对象是映射中的键，则不会指定映射的行为。
这种禁止的特殊情况是地图不允许将自身作为关键字。虽然允许地图将自身包含为值，但是要特别小心：equals和hashCode方法不再被很好地定义在这样的地图上。

    所有通用映射实现类都应该提供两个“标准”构造函数：一个void（无参数）构造函数，用于创建一个空映射，另一个构造函数具有一个类型为Map的参数，
用于创建具有相同键值的新映射映射作为参数。实际上，后者的构造函数允许用户复制任何地图，生成所需类的等价地图。
没有办法执行这个建议（因为接口不能包含构造函数），但是JDK中的所有通用映射实现都符合。

    包含在这个接口中的“破坏性”方法，即修改它们在其上操作的映射的方法被指定为抛出UnsupportedOperationException，如果这个映射不支持该操作的话。
如果是这种情况，这些方法可能是如果调用对地图没有影响，则不需要抛出UnsupportedOperationException。
例如，在不可修改的地图上调用{@link＃putAll（Map）}方法，但不要求，如果映射的“叠加”映射为空，则抛出异常。

    一些映射实现对它们可能包含的键和值有一些限制。例如，一些实现禁止使用空键和值，一些映射对键的类型有一些限制。
尝试插入不合格的键或值会引发一个未经检查的异常试图查询不合格的键或值的存在可能会抛出一个异常，或者它可能只是返回false;
一些实现将显示前者的行为，一些将显示后者。
更一般地，试图对不符合条件的操作键或值的完成不会导致不合格的元素插入到映射中可能会抛出一个异常，或者它可能会成功，在实现的选项。
这种例外被标记为在这个接口的规范中“可选”。

-------------------------------------------------------------------------------------------------------------------------------------------

public interface Map<K,V>
{

    //查询操作
    
    int size();
    /*
        返回此映射中键值映射的数量。如果映射包含多个Integer.MAX_VALUE元素，则返回Integer.MAX_VALUE。
    Returns:
        此图中键值映射的数量
    */
    
    boolean isEmpty();
    /*
        如果此映射不包含键-值映射，则返回true。
    Returns:
        如果此映射不包含键-值映射，则为true
    */
    
    boolean containsKey(Object key)
    /*
        如果此映射包含指定键的映射关系，则返回true。
    更正式地返回true，当且仅当此映射包含键k的映射（key==null？k==null：key.equals（k））（最多只能有一个这样的映射）
    Parameters:
        key-在这张地图上出现的钥匙将被测试
    Retures:
        如果此映射包含指定键的映射，则返回true
    Throws:
        ClassCastException-如果该键的地图类型不合适（可选）
        NullPointerException-如果指定的键是空的，并且该映射不允许空键（可选）
    */
    
    boolean containsValue(Object value);
    /*
        如果此映射将一个或多个键映射到指定值，则返回true。
    更正式地返回true，当且仅当此映射至少包含一个映射到值v（value==null？v==null：value）时才返回true。等于（v））。
    对于大多数Map接口的实现，这个操作可能需要时间线性的地图大小。
    Parameters:
        value-价值在这张地图的存在将被测试
    Returns:
        如果此映射将一个或多个键映射到指定的值，则为true
    Throws:
        ClassCastException-如果该地图的值是不恰当的类型（可选）
        NullPointerException-如果指定的值为空，并且该映射不允许空值（可选）
    */
    
    V get(Object key);
    /*
        返回指定键所在的值映射，如果此映射不包含映射关键字，则为null。
        更正式地说，如果这个映射包含从键k到值v的映射（key==null？k==null：key.equals（k）），那么这个方法返回v;
    否则返回null（最多可以有一个这样的映射）
        如果这个映射允许空值，那么null的返回值并不一定表示映射不包含映射关键字;映射也可能显式映射关键字为null。
    containsKey操作可以用来区分这两个案例。
    Parameters:
        key-其关联值将被返回的键
    Returns:
        指定的键映射到的值，或者如果为null该映射不包含该键的映射
    Throws:
        ClassCastException-如果该键的地图类型不合适（可选）
        NullPointerException-如果指定的键是空的，并且该映射不允许空键（可选）
    */
    
    //修改操作
    
    V put(K key, V value);
    /*
        将指定值与此映射中的指定键相关联（可选操作）。
    如果映射先前包含该键的映射，则旧值将被指定的值替换（映射m被认为包含键的映射k当且仅当m.containsKey（k）将返回true。）
    Parameters:
        key-键与指定值相关联
        value-值与指定的键相关联
    Returns:
        与key关联的前一个值;如果没有key的映射，则返回null（null返回还可以指示映射先前将null与key关联，如果实现支持null值）。
    Throws:
        UnsupportedOperationException-如果放置操作不受此地图支持
        ClassCastException-如果指定的键或值的类阻止它被存储在这个映射
        NullPointerException-如果指定的键或值为空，并且此映射不允许空键或值
        IllegalArgumentException-如果指定键或值的某些属性阻止将其存储在此映射中
    */
    
    V remove(Object key);
    /*
        如果该映射存在，则从该映射中除去该映射（可选操作）。
    更正式地，如果该映射包含从键k到值v的映射那么（key==null？k==null：key.equals（k）），该映射将被移除（映射最多可以包含一个这样的映射）。
        返回此映射先前与键关联的值;如果映射不包含键映射，则返回null。
        如果此映射允许空值，则返回值为null并不一定表示该映射不包含映射;映射也可能将映射明确映射到空值。
        一旦调用返回，映射将不包含指定键的映射。
    Parameters:
        key-键的映射将被从地图上删除
    Returns:
        之前与键关联的值，如果没有键映射，则返回null。
    Throws:
        UnsupportedOperationException-如果此映射不支持删除操作
        ClassCastException-如果该键的地图类型不合适（可选）
        NullPointerException-如果指定的键是空的，并且该映射不允许空键（可选）
    */
    
    //批量操作
    
    void putAll(Map<? extends K, ? extends V> m);
    /*
        将指定映射的所有映射复制到此映射（可选操作）。
    此调用的效果等同于在此映射上调用put（k，v）的次数，对于指定的映射（从关键字k到值v）如果指定的地图在操作过程中被修改，则此操作的行为是不确定的。
    Parameters:
        m-映射存储在这张地图上
    Throws:
        UnsupportedOperationException-如果putAll操作不受此映射支持
        ClassCastException-如果指定的地图中的某个键或值的类别阻止将其存储在此地图中
        NullPointerException-如果指定的映射为空，或者该映射不允许空键或值，并且指定的映射包含空键或值
        IllegalArgumentException-如果指定地图中某个键或值的某个属性阻止将其存储在此地图中
    */
    
    void clear();
    /*
        从此映射中删除所有映射（可选操作）。在此调用返回后，映射将为空。
    Throws:
        UnsupportedOperationException-如果该地图不支持清除操作
    */
    
    //查看
    
    Set<K> keySet();
    /*
        返回此映射中包含的键的Set视图。该集由映射支持，因此对映射的更改会反映在集中，反之亦然。
    如果在对集进行迭代的同时映射被修改（除了通过迭代器自己的删除操作），迭代的结果是不确定的。
    集合支持元素删除，通过Iterator.remove，Set.remove，removeAll，retainAll和clear操作从映射中删除相应的映射它不支持add或addAll操作。
    Returns:
        包含在此映射中的键的集合视图
    */
    
    Collection<V> values();
    /*
        返回此映射中包含的值的集合视图。集合由映射支持，因此对映射的更改反映在集合中，反之亦然。
    如果在迭代集合的迭代过程中修改映射（除了通过迭代器自己的删除操作），迭代的结果是不确定的。
    集合支持元素删除，从映射中删除相应的映射，通过Iterator.remove，Collection.remove，removeAll，retainAll和clear操作。它不支持add或addAll操作。
    Returns:
        该地图中包含的值的集合视图
    */
    
    Set<Map.Entry<K, V>> entrySet();
    /*
        返回此映射中包含的映射的Set视图。集合由映射支持，因此对映射的更改会反映在集合中，反之亦然。
    如果在对集合进行迭代的同时映射被修改（除了通过迭代器自己的移除操作，或者通过迭代器返回的映射条目上的setValue操作），迭代的结果是不确定的。
    集合支持元素移除，通过迭代器从映射中移除相应的映射。删除，Set.remove，removeAll，retainAll和清除操作。它不支持add或addAll操作。
    Returns:
        该地图中包含的映射的集合视图
    */
    
    //比较和哈希
    
    boolean equals(Object o);
    /*
        将指定对象与此映射进行比较以得到相等性。如果给定对象也是映射并且两个映射表示相同的映射，则返回true。
    更多在形式上，如果m1.entrySet（）.equals（m2.entrySet（）），则两个映射m1和m2表示相同的映射，
    这可以确保equals方法在Map接口的不同实现之间正常工作。
    Parameters:
        o-要与这张地图相比较的对象
    Returns:
        如果指定的对象等于此映射，则返回true
    */
    
    int hashCode();
    /*
        返回此映射的哈希码值。映射的哈希码被定义为映射的entrySet（）视图中每个条目的哈希码的总和。
    这确保了m1.equals（m2）意味着m1.hashCode（）== m2.hashCode（）对于任何两个映射m1和m2，如Object.hashCode的通用契约所要求的。
    Returns:
        此地图的哈希码值
    */
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}
